//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the pratik_controller_one_link_constraint package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __pratik_controller_one_link_constraint__CONTROLLER_ONE_LINK_CONSTRAINTCONFIG_H__
#define __pratik_controller_one_link_constraint__CONTROLLER_ONE_LINK_CONSTRAINTCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace pratik_controller_one_link_constraint
{
  class controller_one_link_constraintConfigStatics;

  class controller_one_link_constraintConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(controller_one_link_constraintConfig &config, const controller_one_link_constraintConfig &max, const controller_one_link_constraintConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const controller_one_link_constraintConfig &config1, const controller_one_link_constraintConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, controller_one_link_constraintConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const controller_one_link_constraintConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, controller_one_link_constraintConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const controller_one_link_constraintConfig &config) const = 0;
      virtual void getValue(const controller_one_link_constraintConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T controller_one_link_constraintConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T controller_one_link_constraintConfig::* field;

      virtual void clamp(controller_one_link_constraintConfig &config, const controller_one_link_constraintConfig &max, const controller_one_link_constraintConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const controller_one_link_constraintConfig &config1, const controller_one_link_constraintConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, controller_one_link_constraintConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const controller_one_link_constraintConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, controller_one_link_constraintConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const controller_one_link_constraintConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const controller_one_link_constraintConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, controller_one_link_constraintConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, controller_one_link_constraintConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(controller_one_link_constraintConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class LINK_GAINS
{
  public:
    LINK_GAINS()
    {
      state = true;
      name = "Link_Gains";
    }

    void setParams(controller_one_link_constraintConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("kq_1"==(*_i)->name){kq_1 = boost::any_cast<double>(val);}
        if("kq_2"==(*_i)->name){kq_2 = boost::any_cast<double>(val);}
        if("kq_3"==(*_i)->name){kq_3 = boost::any_cast<double>(val);}
        if("kq_dot_1"==(*_i)->name){kq_dot_1 = boost::any_cast<double>(val);}
        if("kq_dot_2"==(*_i)->name){kq_dot_2 = boost::any_cast<double>(val);}
        if("kq_dot_3"==(*_i)->name){kq_dot_3 = boost::any_cast<double>(val);}
      }
    }

    double kq_1;
double kq_2;
double kq_3;
double kq_dot_1;
double kq_dot_2;
double kq_dot_3;

    bool state;
    std::string name;

    
}link_gains;

class LAC_GAIN_TUNER
{
  public:
    LAC_GAIN_TUNER()
    {
      state = true;
      name = "LAC_Gain_Tuner";
    }

    void setParams(controller_one_link_constraintConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("gamma_p_LAC"==(*_i)->name){gamma_p_LAC = boost::any_cast<double>(val);}
        if("gamma_d_LAC"==(*_i)->name){gamma_d_LAC = boost::any_cast<double>(val);}
        if("kappa_p_LAC"==(*_i)->name){kappa_p_LAC = boost::any_cast<double>(val);}
        if("kappa_d_LAC"==(*_i)->name){kappa_d_LAC = boost::any_cast<double>(val);}
        if("LAC_Auto_Gain_Tuner_enabled"==(*_i)->name){LAC_Auto_Gain_Tuner_enabled = boost::any_cast<bool>(val);}
      }
    }

    double gamma_p_LAC;
double gamma_d_LAC;
double kappa_p_LAC;
double kappa_d_LAC;
bool LAC_Auto_Gain_Tuner_enabled;

    bool state;
    std::string name;

    
}lac_gain_tuner;

class DESIRED_ORIENTATION
{
  public:
    DESIRED_ORIENTATION()
    {
      state = true;
      name = "Desired_orientation";
    }

    void setParams(controller_one_link_constraintConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("roll"==(*_i)->name){roll = boost::any_cast<double>(val);}
        if("pitch"==(*_i)->name){pitch = boost::any_cast<double>(val);}
        if("yaw"==(*_i)->name){yaw = boost::any_cast<double>(val);}
      }
    }

    double roll;
double pitch;
double yaw;

    bool state;
    std::string name;

    
}desired_orientation;

class HORIZONTAL_GAINS
{
  public:
    HORIZONTAL_GAINS()
    {
      state = true;
      name = "Horizontal_gains";
    }

    void setParams(controller_one_link_constraintConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("kpx"==(*_i)->name){kpx = boost::any_cast<double>(val);}
        if("kpy"==(*_i)->name){kpy = boost::any_cast<double>(val);}
        if("kdx"==(*_i)->name){kdx = boost::any_cast<double>(val);}
        if("kdy"==(*_i)->name){kdy = boost::any_cast<double>(val);}
      }
    }

    double kpx;
double kpy;
double kdx;
double kdy;

    bool state;
    std::string name;

    
}horizontal_gains;

class VERTICAL_GAINS
{
  public:
    VERTICAL_GAINS()
    {
      state = true;
      name = "Vertical_gains";
    }

    void setParams(controller_one_link_constraintConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("kpz"==(*_i)->name){kpz = boost::any_cast<double>(val);}
        if("kdz"==(*_i)->name){kdz = boost::any_cast<double>(val);}
      }
    }

    double kpz;
double kdz;

    bool state;
    std::string name;

    
}vertical_gains;

class ATTITUDE_CONTROL
{
  public:
    ATTITUDE_CONTROL()
    {
      state = true;
      name = "Attitude_control";
    }

    void setParams(controller_one_link_constraintConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("kq_roll_pitch"==(*_i)->name){kq_roll_pitch = boost::any_cast<double>(val);}
        if("kq_yaw"==(*_i)->name){kq_yaw = boost::any_cast<double>(val);}
      }
    }

    double kq_roll_pitch;
double kq_yaw;

    bool state;
    std::string name;

    
}attitude_control;

class MASS_ESTIMATOR
{
  public:
    MASS_ESTIMATOR()
    {
      state = true;
      name = "Mass_estimator";
    }

    void setParams(controller_one_link_constraintConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("km"==(*_i)->name){km = boost::any_cast<double>(val);}
        if("km_lim"==(*_i)->name){km_lim = boost::any_cast<double>(val);}
      }
    }

    double km;
double km_lim;

    bool state;
    std::string name;

    
}mass_estimator;

class DESIRED_FORCE_RELATIVE_TO_HOVER
{
  public:
    DESIRED_FORCE_RELATIVE_TO_HOVER()
    {
      state = true;
      name = "Desired_force_relative_to_hover";
    }

    void setParams(controller_one_link_constraintConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("force"==(*_i)->name){force = boost::any_cast<double>(val);}
      }
    }

    double force;

    bool state;
    std::string name;

    
}desired_force_relative_to_hover;

class OUTPUT
{
  public:
    OUTPUT()
    {
      state = true;
      name = "Output";
    }

    void setParams(controller_one_link_constraintConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("jerk_feedforward"==(*_i)->name){jerk_feedforward = boost::any_cast<bool>(val);}
        if("pitch_roll_heading_rate_compensation"==(*_i)->name){pitch_roll_heading_rate_compensation = boost::any_cast<bool>(val);}
      }
    }

    bool jerk_feedforward;
bool pitch_roll_heading_rate_compensation;

    bool state;
    std::string name;

    
}output;

}groups;



//#line 13 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double kq_1;
//#line 14 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double kq_2;
//#line 15 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double kq_3;
//#line 17 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double kq_dot_1;
//#line 18 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double kq_dot_2;
//#line 19 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double kq_dot_3;
//#line 23 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double gamma_p_LAC;
//#line 24 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double gamma_d_LAC;
//#line 25 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double kappa_p_LAC;
//#line 26 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double kappa_d_LAC;
//#line 27 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      bool LAC_Auto_Gain_Tuner_enabled;
//#line 31 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double roll;
//#line 32 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double pitch;
//#line 33 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double yaw;
//#line 37 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double kpx;
//#line 38 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double kpy;
//#line 40 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double kdx;
//#line 41 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double kdy;
//#line 45 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double kpz;
//#line 46 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double kdz;
//#line 50 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double kq_roll_pitch;
//#line 51 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double kq_yaw;
//#line 55 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double km;
//#line 56 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double km_lim;
//#line 64 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      double force;
//#line 61 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      bool jerk_feedforward;
//#line 62 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      bool pitch_roll_heading_rate_compensation;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("controller_one_link_constraintConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (size_t i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (size_t i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (size_t i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (size_t i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const controller_one_link_constraintConfig &__max__ = __getMax__();
      const controller_one_link_constraintConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const controller_one_link_constraintConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const controller_one_link_constraintConfig &__getDefault__();
    static const controller_one_link_constraintConfig &__getMax__();
    static const controller_one_link_constraintConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const controller_one_link_constraintConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void controller_one_link_constraintConfig::ParamDescription<std::string>::clamp(controller_one_link_constraintConfig &config, const controller_one_link_constraintConfig &max, const controller_one_link_constraintConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class controller_one_link_constraintConfigStatics
  {
    friend class controller_one_link_constraintConfig;

    controller_one_link_constraintConfigStatics()
    {
controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT, controller_one_link_constraintConfig> Default("Default", "", 0, 0, true, &controller_one_link_constraintConfig::groups);
controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::LINK_GAINS, controller_one_link_constraintConfig::DEFAULT> Link_Gains("Link_Gains", "", 0, 1, true, &controller_one_link_constraintConfig::DEFAULT::link_gains);
//#line 13 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.kq_1 = 0.0;
//#line 13 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.kq_1 = 100.0;
//#line 13 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.kq_1 = 0.0;
//#line 13 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Link_Gains.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kq_1", "double", 0, "kq 1 gains", "", &controller_one_link_constraintConfig::kq_1)));
//#line 13 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kq_1", "double", 0, "kq 1 gains", "", &controller_one_link_constraintConfig::kq_1)));
//#line 14 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.kq_2 = 0.0;
//#line 14 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.kq_2 = 100.0;
//#line 14 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.kq_2 = 0.0;
//#line 14 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Link_Gains.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kq_2", "double", 0, "kq 2 gains", "", &controller_one_link_constraintConfig::kq_2)));
//#line 14 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kq_2", "double", 0, "kq 2 gains", "", &controller_one_link_constraintConfig::kq_2)));
//#line 15 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.kq_3 = 0.0;
//#line 15 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.kq_3 = 100.0;
//#line 15 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.kq_3 = 0.0;
//#line 15 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Link_Gains.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kq_3", "double", 0, "kq 3 gains", "", &controller_one_link_constraintConfig::kq_3)));
//#line 15 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kq_3", "double", 0, "kq 3 gains", "", &controller_one_link_constraintConfig::kq_3)));
//#line 17 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.kq_dot_1 = 0.0;
//#line 17 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.kq_dot_1 = 100.0;
//#line 17 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.kq_dot_1 = 0.0;
//#line 17 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Link_Gains.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kq_dot_1", "double", 0, "kq_dot 1 gains", "", &controller_one_link_constraintConfig::kq_dot_1)));
//#line 17 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kq_dot_1", "double", 0, "kq_dot 1 gains", "", &controller_one_link_constraintConfig::kq_dot_1)));
//#line 18 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.kq_dot_2 = 0.0;
//#line 18 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.kq_dot_2 = 100.0;
//#line 18 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.kq_dot_2 = 0.0;
//#line 18 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Link_Gains.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kq_dot_2", "double", 0, "kq_dot 2 gains", "", &controller_one_link_constraintConfig::kq_dot_2)));
//#line 18 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kq_dot_2", "double", 0, "kq_dot 2 gains", "", &controller_one_link_constraintConfig::kq_dot_2)));
//#line 19 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.kq_dot_3 = 0.0;
//#line 19 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.kq_dot_3 = 100.0;
//#line 19 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.kq_dot_3 = 0.0;
//#line 19 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Link_Gains.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kq_dot_3", "double", 0, "kq_dot 3 gains", "", &controller_one_link_constraintConfig::kq_dot_3)));
//#line 19 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kq_dot_3", "double", 0, "kq_dot 3 gains", "", &controller_one_link_constraintConfig::kq_dot_3)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Link_Gains.convertParams();
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::LINK_GAINS, controller_one_link_constraintConfig::DEFAULT>(Link_Gains)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::LINK_GAINS, controller_one_link_constraintConfig::DEFAULT>(Link_Gains)));
controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::LAC_GAIN_TUNER, controller_one_link_constraintConfig::DEFAULT> LAC_Gain_Tuner("LAC_Gain_Tuner", "", 0, 2, true, &controller_one_link_constraintConfig::DEFAULT::lac_gain_tuner);
//#line 23 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.gamma_p_LAC = 0.0;
//#line 23 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.gamma_p_LAC = 100.0;
//#line 23 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.gamma_p_LAC = 0.0;
//#line 23 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      LAC_Gain_Tuner.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("gamma_p_LAC", "double", 0, "gamma_p_LAC", "", &controller_one_link_constraintConfig::gamma_p_LAC)));
//#line 23 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("gamma_p_LAC", "double", 0, "gamma_p_LAC", "", &controller_one_link_constraintConfig::gamma_p_LAC)));
//#line 24 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.gamma_d_LAC = 0.0;
//#line 24 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.gamma_d_LAC = 100.0;
//#line 24 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.gamma_d_LAC = 0.0;
//#line 24 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      LAC_Gain_Tuner.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("gamma_d_LAC", "double", 0, "gamma_d_LAC", "", &controller_one_link_constraintConfig::gamma_d_LAC)));
//#line 24 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("gamma_d_LAC", "double", 0, "gamma_d_LAC", "", &controller_one_link_constraintConfig::gamma_d_LAC)));
//#line 25 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.kappa_p_LAC = 0.0;
//#line 25 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.kappa_p_LAC = 20.0;
//#line 25 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.kappa_p_LAC = 0.0;
//#line 25 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      LAC_Gain_Tuner.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kappa_p_LAC", "double", 0, "kappa_p_LAC", "", &controller_one_link_constraintConfig::kappa_p_LAC)));
//#line 25 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kappa_p_LAC", "double", 0, "kappa_p_LAC", "", &controller_one_link_constraintConfig::kappa_p_LAC)));
//#line 26 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.kappa_d_LAC = 0.0;
//#line 26 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.kappa_d_LAC = 20.0;
//#line 26 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.kappa_d_LAC = 0.0;
//#line 26 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      LAC_Gain_Tuner.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kappa_d_LAC", "double", 0, "kappa_d_LAC", "", &controller_one_link_constraintConfig::kappa_d_LAC)));
//#line 26 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kappa_d_LAC", "double", 0, "kappa_d_LAC", "", &controller_one_link_constraintConfig::kappa_d_LAC)));
//#line 27 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.LAC_Auto_Gain_Tuner_enabled = 0;
//#line 27 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.LAC_Auto_Gain_Tuner_enabled = 1;
//#line 27 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.LAC_Auto_Gain_Tuner_enabled = 1;
//#line 27 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      LAC_Gain_Tuner.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<bool>("LAC_Auto_Gain_Tuner_enabled", "bool", 0, "LAC_Auto_Gain_Tuner_enabled", "", &controller_one_link_constraintConfig::LAC_Auto_Gain_Tuner_enabled)));
//#line 27 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<bool>("LAC_Auto_Gain_Tuner_enabled", "bool", 0, "LAC_Auto_Gain_Tuner_enabled", "", &controller_one_link_constraintConfig::LAC_Auto_Gain_Tuner_enabled)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      LAC_Gain_Tuner.convertParams();
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::LAC_GAIN_TUNER, controller_one_link_constraintConfig::DEFAULT>(LAC_Gain_Tuner)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::LAC_GAIN_TUNER, controller_one_link_constraintConfig::DEFAULT>(LAC_Gain_Tuner)));
controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::DESIRED_ORIENTATION, controller_one_link_constraintConfig::DEFAULT> Desired_orientation("Desired_orientation", "", 0, 3, true, &controller_one_link_constraintConfig::DEFAULT::desired_orientation);
//#line 31 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.roll = -3.14;
//#line 31 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.roll = 3.14;
//#line 31 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.roll = 0.0;
//#line 31 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Desired_orientation.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("roll", "double", 0, "Desired roll", "", &controller_one_link_constraintConfig::roll)));
//#line 31 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("roll", "double", 0, "Desired roll", "", &controller_one_link_constraintConfig::roll)));
//#line 32 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.pitch = -3.14;
//#line 32 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.pitch = 3.14;
//#line 32 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.pitch = 0.0;
//#line 32 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Desired_orientation.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("pitch", "double", 0, "Desired pitch", "", &controller_one_link_constraintConfig::pitch)));
//#line 32 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("pitch", "double", 0, "Desired pitch", "", &controller_one_link_constraintConfig::pitch)));
//#line 33 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.yaw = -3.14;
//#line 33 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.yaw = 3.14;
//#line 33 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.yaw = 0.0;
//#line 33 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Desired_orientation.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("yaw", "double", 0, "Desired pitch", "", &controller_one_link_constraintConfig::yaw)));
//#line 33 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("yaw", "double", 0, "Desired pitch", "", &controller_one_link_constraintConfig::yaw)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Desired_orientation.convertParams();
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::DESIRED_ORIENTATION, controller_one_link_constraintConfig::DEFAULT>(Desired_orientation)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::DESIRED_ORIENTATION, controller_one_link_constraintConfig::DEFAULT>(Desired_orientation)));
controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::HORIZONTAL_GAINS, controller_one_link_constraintConfig::DEFAULT> Horizontal_gains("Horizontal_gains", "", 0, 4, true, &controller_one_link_constraintConfig::DEFAULT::horizontal_gains);
//#line 37 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.kpx = 0.0;
//#line 37 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.kpx = 150.0;
//#line 37 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.kpx = 100.0;
//#line 37 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Horizontal_gains.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kpx", "double", 0, "Position gain in x", "", &controller_one_link_constraintConfig::kpx)));
//#line 37 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kpx", "double", 0, "Position gain in x", "", &controller_one_link_constraintConfig::kpx)));
//#line 38 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.kpy = 0.0;
//#line 38 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.kpy = 150.0;
//#line 38 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.kpy = 100.0;
//#line 38 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Horizontal_gains.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kpy", "double", 0, "Position gain in y", "", &controller_one_link_constraintConfig::kpy)));
//#line 38 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kpy", "double", 0, "Position gain in y", "", &controller_one_link_constraintConfig::kpy)));
//#line 40 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.kdx = 0.0;
//#line 40 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.kdx = 50.0;
//#line 40 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.kdx = 25.0;
//#line 40 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Horizontal_gains.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kdx", "double", 0, "Velocity gain in x", "", &controller_one_link_constraintConfig::kdx)));
//#line 40 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kdx", "double", 0, "Velocity gain in x", "", &controller_one_link_constraintConfig::kdx)));
//#line 41 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.kdy = 0.0;
//#line 41 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.kdy = 50.0;
//#line 41 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.kdy = 25.0;
//#line 41 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Horizontal_gains.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kdy", "double", 0, "Velocity gain in y", "", &controller_one_link_constraintConfig::kdy)));
//#line 41 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kdy", "double", 0, "Velocity gain in y", "", &controller_one_link_constraintConfig::kdy)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Horizontal_gains.convertParams();
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::HORIZONTAL_GAINS, controller_one_link_constraintConfig::DEFAULT>(Horizontal_gains)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::HORIZONTAL_GAINS, controller_one_link_constraintConfig::DEFAULT>(Horizontal_gains)));
controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::VERTICAL_GAINS, controller_one_link_constraintConfig::DEFAULT> Vertical_gains("Vertical_gains", "", 0, 5, true, &controller_one_link_constraintConfig::DEFAULT::vertical_gains);
//#line 45 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.kpz = 0.0;
//#line 45 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.kpz = 200.0;
//#line 45 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.kpz = 55.0;
//#line 45 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Vertical_gains.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kpz", "double", 0, "Position gain in z", "", &controller_one_link_constraintConfig::kpz)));
//#line 45 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kpz", "double", 0, "Position gain in z", "", &controller_one_link_constraintConfig::kpz)));
//#line 46 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.kdz = 0.0;
//#line 46 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.kdz = 200.0;
//#line 46 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.kdz = 45.0;
//#line 46 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Vertical_gains.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kdz", "double", 0, "Velocity gain in z", "", &controller_one_link_constraintConfig::kdz)));
//#line 46 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kdz", "double", 0, "Velocity gain in z", "", &controller_one_link_constraintConfig::kdz)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Vertical_gains.convertParams();
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::VERTICAL_GAINS, controller_one_link_constraintConfig::DEFAULT>(Vertical_gains)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::VERTICAL_GAINS, controller_one_link_constraintConfig::DEFAULT>(Vertical_gains)));
controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::ATTITUDE_CONTROL, controller_one_link_constraintConfig::DEFAULT> Attitude_control("Attitude_control", "", 0, 6, true, &controller_one_link_constraintConfig::DEFAULT::attitude_control);
//#line 50 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.kq_roll_pitch = 0.0;
//#line 50 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.kq_roll_pitch = 20.0;
//#line 50 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.kq_roll_pitch = 0.0;
//#line 50 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Attitude_control.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kq_roll_pitch", "double", 0, "Attitude constant for intrinsic roll and pitch control", "", &controller_one_link_constraintConfig::kq_roll_pitch)));
//#line 50 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kq_roll_pitch", "double", 0, "Attitude constant for intrinsic roll and pitch control", "", &controller_one_link_constraintConfig::kq_roll_pitch)));
//#line 51 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.kq_yaw = 0.0;
//#line 51 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.kq_yaw = 40.0;
//#line 51 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.kq_yaw = 0.0;
//#line 51 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Attitude_control.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kq_yaw", "double", 0, "Attitude constant for intrinsic yaw control", "", &controller_one_link_constraintConfig::kq_yaw)));
//#line 51 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("kq_yaw", "double", 0, "Attitude constant for intrinsic yaw control", "", &controller_one_link_constraintConfig::kq_yaw)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Attitude_control.convertParams();
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::ATTITUDE_CONTROL, controller_one_link_constraintConfig::DEFAULT>(Attitude_control)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::ATTITUDE_CONTROL, controller_one_link_constraintConfig::DEFAULT>(Attitude_control)));
controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::MASS_ESTIMATOR, controller_one_link_constraintConfig::DEFAULT> Mass_estimator("Mass_estimator", "", 0, 7, true, &controller_one_link_constraintConfig::DEFAULT::mass_estimator);
//#line 55 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.km = 0.0;
//#line 55 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.km = 2.0;
//#line 55 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.km = 0.0;
//#line 55 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Mass_estimator.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("km", "double", 0, "Integral constant for mass", "", &controller_one_link_constraintConfig::km)));
//#line 55 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("km", "double", 0, "Integral constant for mass", "", &controller_one_link_constraintConfig::km)));
//#line 56 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.km_lim = 0.0;
//#line 56 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.km_lim = 50.0;
//#line 56 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.km_lim = 0.0;
//#line 56 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Mass_estimator.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("km_lim", "double", 0, "Mass integral limit", "", &controller_one_link_constraintConfig::km_lim)));
//#line 56 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("km_lim", "double", 0, "Mass integral limit", "", &controller_one_link_constraintConfig::km_lim)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Mass_estimator.convertParams();
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::MASS_ESTIMATOR, controller_one_link_constraintConfig::DEFAULT>(Mass_estimator)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::MASS_ESTIMATOR, controller_one_link_constraintConfig::DEFAULT>(Mass_estimator)));
controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::DESIRED_FORCE_RELATIVE_TO_HOVER, controller_one_link_constraintConfig::DEFAULT> Desired_force_relative_to_hover("Desired_force_relative_to_hover", "", 0, 8, true, &controller_one_link_constraintConfig::DEFAULT::desired_force_relative_to_hover);
//#line 64 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.force = -10.0;
//#line 64 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.force = 10.0;
//#line 64 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.force = 0.0;
//#line 64 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Desired_force_relative_to_hover.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("force", "double", 0, "Desired force", "", &controller_one_link_constraintConfig::force)));
//#line 64 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<double>("force", "double", 0, "Desired force", "", &controller_one_link_constraintConfig::force)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Desired_force_relative_to_hover.convertParams();
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::DESIRED_FORCE_RELATIVE_TO_HOVER, controller_one_link_constraintConfig::DEFAULT>(Desired_force_relative_to_hover)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::DESIRED_FORCE_RELATIVE_TO_HOVER, controller_one_link_constraintConfig::DEFAULT>(Desired_force_relative_to_hover)));
controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::OUTPUT, controller_one_link_constraintConfig::DEFAULT> Output("Output", "", 0, 9, true, &controller_one_link_constraintConfig::DEFAULT::output);
//#line 61 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.jerk_feedforward = 0;
//#line 61 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.jerk_feedforward = 1;
//#line 61 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.jerk_feedforward = 1;
//#line 61 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Output.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<bool>("jerk_feedforward", "bool", 0, "Jerk feedforward", "", &controller_one_link_constraintConfig::jerk_feedforward)));
//#line 61 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<bool>("jerk_feedforward", "bool", 0, "Jerk feedforward", "", &controller_one_link_constraintConfig::jerk_feedforward)));
//#line 62 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __min__.pitch_roll_heading_rate_compensation = 0;
//#line 62 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __max__.pitch_roll_heading_rate_compensation = 1;
//#line 62 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __default__.pitch_roll_heading_rate_compensation = 1;
//#line 62 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      Output.abstract_parameters.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<bool>("pitch_roll_heading_rate_compensation", "bool", 0, "Pitch/Roll rate -> heading rate compensation", "", &controller_one_link_constraintConfig::pitch_roll_heading_rate_compensation)));
//#line 62 "/home/mrs/catkin_ws_mrs_net_stabilization_exp/src/pratik_controller_one_link_constraint/cfg/controller_one_link_constraint.cfg"
      __param_descriptions__.push_back(controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr(new controller_one_link_constraintConfig::ParamDescription<bool>("pitch_roll_heading_rate_compensation", "bool", 0, "Pitch/Roll rate -> heading rate compensation", "", &controller_one_link_constraintConfig::pitch_roll_heading_rate_compensation)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Output.convertParams();
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::OUTPUT, controller_one_link_constraintConfig::DEFAULT>(Output)));
//#line 125 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT::OUTPUT, controller_one_link_constraintConfig::DEFAULT>(Output)));
//#line 247 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 247 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr(new controller_one_link_constraintConfig::GroupDescription<controller_one_link_constraintConfig::DEFAULT, controller_one_link_constraintConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    controller_one_link_constraintConfig __max__;
    controller_one_link_constraintConfig __min__;
    controller_one_link_constraintConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const controller_one_link_constraintConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static controller_one_link_constraintConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &controller_one_link_constraintConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const controller_one_link_constraintConfig &controller_one_link_constraintConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const controller_one_link_constraintConfig &controller_one_link_constraintConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const controller_one_link_constraintConfig &controller_one_link_constraintConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<controller_one_link_constraintConfig::AbstractParamDescriptionConstPtr> &controller_one_link_constraintConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<controller_one_link_constraintConfig::AbstractGroupDescriptionConstPtr> &controller_one_link_constraintConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const controller_one_link_constraintConfigStatics *controller_one_link_constraintConfig::__get_statics__()
  {
    const static controller_one_link_constraintConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = controller_one_link_constraintConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __CONTROLLER_ONE_LINK_CONSTRAINTRECONFIGURATOR_H__

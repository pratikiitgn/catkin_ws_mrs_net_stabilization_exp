#!/usr/bin/env python
PACKAGE = "pratik_controller_one_link_constraint"

import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

link_controller = gen.add_group("Link Gains");

link_controller.add("kq_1", double_t, 0, "kq 1 gains", 0.0, 0.0, 100.0);
link_controller.add("kq_2", double_t, 0, "kq 2 gains", 0.0, 0.0, 100.0);
link_controller.add("kq_3", double_t, 0, "kq 3 gains", 0.0, 0.0, 100.0);

link_controller.add("kq_dot_1", double_t, 0, "kq_dot 1 gains", 0.0, 0.0, 100.0);
link_controller.add("kq_dot_2", double_t, 0, "kq_dot 2 gains", 0.0, 0.0, 100.0);
link_controller.add("kq_dot_3", double_t, 0, "kq_dot 3 gains", 0.0, 0.0, 100.0);

LAC_gain_tuner = gen.add_group("LAC Gain Tuner");

LAC_gain_tuner.add("gamma_p_LAC", double_t, 0, "gamma_p_LAC", 0.0, 0.0, 100.0);
LAC_gain_tuner.add("gamma_d_LAC", double_t, 0, "gamma_d_LAC", 0.0, 0.0, 100.0);
LAC_gain_tuner.add("kappa_p_LAC", double_t, 0, "kappa_p_LAC", 0.0, 0.0, 20.0);
LAC_gain_tuner.add("kappa_d_LAC", double_t, 0, "kappa_d_LAC", 0.0, 0.0, 20.0);
LAC_gain_tuner.add("LAC_Auto_Gain_Tuner_enabled", bool_t, 0, "LAC_Auto_Gain_Tuner_enabled", True)

orientation = gen.add_group("Desired orientation");

orientation.add("roll", double_t, 0, "Desired roll", 0.0, -3.14, 3.14)
orientation.add("pitch", double_t, 0, "Desired pitch", 0.0, -3.14, 3.14)
orientation.add("yaw", double_t, 0, "Desired pitch", 0.0, -3.14, 3.14)

horizontal = gen.add_group("Horizontal gains");

horizontal.add("kpx", double_t, 0, "Position gain in x", 100, 0.0, 150.0)
horizontal.add("kpy", double_t, 0, "Position gain in y", 100, 0.0, 150.0)

horizontal.add("kdx", double_t, 0, "Velocity gain in x", 25.0, 0.0, 50.0)
horizontal.add("kdy", double_t, 0, "Velocity gain in y", 25.0, 0.0, 50.0)

vertical   = gen.add_group("Vertical gains");

vertical.add("kpz", double_t, 0, "Position gain in z", 55.0, 0.0, 200.0)
vertical.add("kdz", double_t, 0, "Velocity gain in z", 45.0, 0.0, 200.0)

attitude = gen.add_group("Attitude control");

attitude.add("kq_roll_pitch", double_t, 0, "Attitude constant for intrinsic roll and pitch control", 0.0, 0.0, 20.0)
attitude.add("kq_yaw", double_t, 0, "Attitude constant for intrinsic yaw control", 0.0, 0.0, 40.0)

attitude = gen.add_group("Mass estimator");

attitude.add("km", double_t, 0, "Integral constant for mass", 0.0, 0.0, 2.0)
attitude.add("km_lim", double_t, 0, "Mass integral limit", 0.0, 0.0, 50.0)

force = gen.add_group("Desired force relative to hover");

output = gen.add_group("Output");
output.add("jerk_feedforward", bool_t, 0, "Jerk feedforward", True)
output.add("pitch_roll_heading_rate_compensation", bool_t, 0, "Pitch/Roll rate -> heading rate compensation", True)

force.add("force", double_t, 0, "Desired force", 0.0, -10.0, 10.0)

exit(gen.generate(PACKAGE, "ControllerOneLinkConstraint", "controller_one_link_constraint"))
